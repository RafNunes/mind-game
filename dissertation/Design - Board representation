One of the first things we had to decide was how we were going to represent the game board. A simple approach would have been to use an array of 64 elements and to keep track of a row and column for each piece in play. This would also have meant storing both row and column increments for each possible movement of each piece type. Considering a move would have involved incrementing the piece’s current row and column by the row and column increments for the given move, checking that the resulting row and column are on the board (i.e. between 0 and 7 inclusive). If so, they could be used to index the board to see what is currently occupying that square.

We were encouraged to search for a more efficient and elegant approach. We ended up using the ‘0x88' board representation which uses a 128 instead of a 64 cell array, only using every other 8 cells to refer to squares on the board (i.e. 0 – 7, 16 – 23, and so on). Only a single number is stored to keep track of a piece’s position and for each possible movement for each piece type. Using this scheme allows very efficient checking of whether or not positions are on the board. All indices in the set of cells which do not represent valid positions (8 – 15, 24 – 31, and so on) have a high value for their 4th bit and thus will yield a non-zero number when combined in a bit-wise AND operation with the number 0x88 (10001000). Similarly, all indices higher than 127 (or lower than zero if 8-bit two’s compliment indices are used) will contain a high value for their 8th bit and so too will yield a non-zero value when combined with 0x88.
